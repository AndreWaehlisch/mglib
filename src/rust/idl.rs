/* automatically generated by rust-bindgen */

pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __darwin_intptr_t = ::libc::c_long;
pub type __darwin_natural_t = ::libc::c_uint;
pub type __darwin_ct_rune_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 16usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __mbstate8(&mut self) -> *mut [::libc::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Union_Unnamed1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::libc::c_long;
pub type __darwin_size_t = ::libc::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::libc::c_int;
pub type __darwin_clock_t = ::libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::libc::c_long;
pub type __darwin_time_t = ::libc::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::libc::c_uint;
pub type __darwin_fsfilcnt_t = ::libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::libc::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::libc::c_char; 37usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<extern "C" fn(arg1:
                                                           *mut ::libc::c_void)
                                             -> ()>,
    pub __arg: *mut ::libc::c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
impl ::std::clone::Clone for Struct___darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 40usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_once_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 192usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_t {
    pub __sig: ::libc::c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [::libc::c_char; 8176usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::libc::c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type __darwin_nl_item = ::libc::c_int;
pub type __darwin_wctrans_t = ::libc::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type va_list = __builtin_va_list;
pub type size_t = __darwin_size_t;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sbuf {
    pub _base: *mut ::libc::c_uchar,
    pub _size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___sbuf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___sFILEX { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sFILE {
    pub _p: *mut ::libc::c_uchar,
    pub _r: ::libc::c_int,
    pub _w: ::libc::c_int,
    pub _flags: ::libc::c_short,
    pub _file: ::libc::c_short,
    pub _bf: Struct___sbuf,
    pub _lbfsize: ::libc::c_int,
    pub _cookie: *mut ::libc::c_void,
    pub _close: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                          -> ::libc::c_int>,
    pub _read: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                   arg2: *mut ::libc::c_char,
                                                   arg3: ::libc::c_int)
                                         -> ::libc::c_int>,
    pub _seek: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                   arg2: fpos_t,
                                                   arg3: ::libc::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                    arg2:
                                                        *const ::libc::c_char,
                                                    arg3: ::libc::c_int)
                                          -> ::libc::c_int>,
    pub _ub: Struct___sbuf,
    pub _extra: *mut Struct___sFILEX,
    pub _ur: ::libc::c_int,
    pub _ubuf: [::libc::c_uchar; 3usize],
    pub _nbuf: [::libc::c_uchar; 1usize],
    pub _lb: Struct___sbuf,
    pub _blksize: ::libc::c_int,
    pub _offset: fpos_t,
}
impl ::std::clone::Clone for Struct___sFILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sFILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = Struct___sFILE;
pub type off_t = __darwin_off_t;
pub type ssize_t = __darwin_ssize_t;
pub type __gnuc_va_list = __builtin_va_list;
pub type IDL_PTRINT = ::libc::c_long;
pub type UCHAR = ::libc::c_uchar;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const IDL_FALSE: ::libc::c_uint = 0;
pub const IDL_TRUE: ::libc::c_uint = 1;
pub type IDLBool_t = Enum_Unnamed2;
pub type IDL_INT = ::libc::c_short;
pub type IDL_UINT = ::libc::c_ushort;
pub type IDL_LONG = ::libc::c_int;
pub type IDL_ULONG = ::libc::c_uint;
pub type IDL_LONG64 = ::libc::c_longlong;
pub type IDL_ULONG64 = ::libc::c_ulonglong;
pub type IDL_HVID = IDL_ULONG;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub r: ::libc::c_float,
    pub i: ::libc::c_float,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_COMPLEX = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub r: ::libc::c_double,
    pub i: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_DCOMPLEX = Struct_Unnamed4;
pub type IDL_STRING_SLEN_T = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub slen: IDL_STRING_SLEN_T,
    pub stype: ::libc::c_short,
    pub s: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_STRING = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__idl_ident {
    pub hash: *mut Struct__idl_ident,
    pub name: *mut ::libc::c_char,
    pub len: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__idl_ident {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__idl_ident {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_IDENT = Struct__idl_ident;
pub type IDL_ARRAY_FREE_CB =
    ::std::option::Option<extern "C" fn(data: *mut UCHAR) -> ()>;
pub type IDL_ARRAY_DIM = [IDL_LONG64; 8usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub elt_len: IDL_LONG64,
    pub arr_len: IDL_LONG64,
    pub n_elts: IDL_LONG64,
    pub data: *mut UCHAR,
    pub n_dim: UCHAR,
    pub flags: UCHAR,
    pub file_unit: ::libc::c_short,
    pub dim: IDL_ARRAY_DIM,
    pub free_cb: IDL_ARRAY_FREE_CB,
    pub offset: IDL_LONG64,
    pub data_guard: IDL_LONG64,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_ARRAY = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub arr: *mut IDL_ARRAY,
    pub sdef: *mut Struct__idl_structure,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_SREF = Struct_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed8 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed8 {
    pub unsafe fn sc(&mut self) -> *mut ::libc::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn c(&mut self) -> *mut UCHAR {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut IDL_INT {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ui(&mut self) -> *mut IDL_UINT {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn l(&mut self) -> *mut IDL_LONG {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ul(&mut self) -> *mut IDL_ULONG {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn l64(&mut self) -> *mut IDL_LONG64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ul64(&mut self) -> *mut IDL_ULONG64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut ::libc::c_float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d(&mut self) -> *mut ::libc::c_double {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cmp(&mut self) -> *mut IDL_COMPLEX {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn dcmp(&mut self) -> *mut IDL_DCOMPLEX {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn str(&mut self) -> *mut IDL_STRING {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn arr(&mut self) -> *mut *mut IDL_ARRAY {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s(&mut self) -> *mut IDL_SREF {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn hvid(&mut self) -> *mut IDL_HVID {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn memint(&mut self) -> *mut IDL_LONG64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fileint(&mut self) -> *mut IDL_LONG64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ptrint(&mut self) -> *mut IDL_PTRINT {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_ALLTYPES = Union_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub _type: UCHAR,
    pub flags: UCHAR,
    pub flags2: UCHAR,
    pub value: IDL_ALLTYPES,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_VARIABLE = Struct_Unnamed9;
pub type IDL_VPTR = *mut IDL_VARIABLE;
pub type IDL_SYSRTN_PRO =
    ::std::option::Option<extern "C" fn(argc: ::libc::c_int,
                                        argv: *mut IDL_VPTR,
                                        argk: *mut ::libc::c_char) -> ()>;
pub type IDL_SYSRTN_FUN =
    ::std::option::Option<extern "C" fn(argc: ::libc::c_int,
                                        argv: *mut IDL_VPTR,
                                        argk: *mut ::libc::c_char)
                              -> IDL_VPTR>;
pub type IDL_SYSRTN_GENERIC =
    ::std::option::Option<extern "C" fn() -> *mut IDL_VARIABLE>;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed10 {
    pub unsafe fn generic(&mut self) -> *mut IDL_SYSRTN_GENERIC {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pro(&mut self) -> *mut IDL_SYSRTN_PRO {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fun(&mut self) -> *mut IDL_SYSRTN_FUN {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_SYSRTN_UNION = Union_Unnamed10;
pub type IDL_PRO_PTR = ::std::option::Option<extern "C" fn() -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub funct_addr: IDL_SYSRTN_UNION,
    pub name: *mut ::libc::c_char,
    pub arg_min: ::libc::c_ushort,
    pub arg_max: ::libc::c_ushort,
    pub flags: ::libc::c_int,
    pub extra: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_SYSFUN_DEF2 = Struct_Unnamed11;
pub type IDL_StructDefPtr = *mut Struct__idl_structure;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__idl_tagdef {
    pub id: *mut IDL_IDENT,
    pub offset: IDL_LONG64,
    pub var: IDL_VARIABLE,
}
impl ::std::clone::Clone for Struct__idl_tagdef {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__idl_tagdef {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_TAGDEF = Struct__idl_tagdef;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__idl_structure {
    pub id: *mut IDL_IDENT,
    pub flags: UCHAR,
    pub contains_string: UCHAR,
    pub ntags: ::libc::c_int,
    pub length: IDL_LONG64,
    pub data_length: IDL_LONG64,
    pub rcount: ::libc::c_int,
    pub object: *mut ::libc::c_void,
    pub tag_array_mem: *mut IDL_ARRAY,
    pub tags: [IDL_TAGDEF; 1usize],
}
impl ::std::clone::Clone for Struct__idl_structure {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__idl_structure {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_STRUCTURE = Struct__idl_structure;
pub type Enum_Unnamed12 = ::libc::c_uint;
pub const IDL_MSG_SYSCODE_NONE: ::libc::c_uint = 0;
pub const IDL_MSG_SYSCODE_ERRNO: ::libc::c_uint = 1;
pub type IDL_MSG_SYSCODE_T = Enum_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub name: *mut ::libc::c_char,
    pub format: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_MSG_DEF = Struct_Unnamed13;
pub type IDL_MSG_BLOCK = *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub action: ::libc::c_int,
    pub msg_block: IDL_MSG_BLOCK,
    pub code: ::libc::c_int,
    pub global_code: ::libc::c_int,
    pub syscode_type: IDL_MSG_SYSCODE_T,
    pub syscode: ::libc::c_int,
    pub msg: [::libc::c_char; 2048usize],
    pub sysmsg: [::libc::c_char; 512usize],
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_MSG_ERRSTATE = Struct_Unnamed14;
pub type IDL_MSG_ERRSTATE_PTR = *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub hw_vector: IDL_LONG,
    pub vector_enable: IDL_LONG,
    pub hw_ncpu: IDL_LONG,
    pub tpool_nthreads: IDL_LONG,
    pub tpool_min_elts: IDL_LONG64,
    pub tpool_max_elts: IDL_LONG64,
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_CPU_STRUCT = Struct_Unnamed15;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub name: IDL_STRING,
    pub block: IDL_STRING,
    pub code: IDL_LONG,
    pub sys_code: [IDL_LONG; 2usize],
    pub sys_code_type: IDL_STRING,
    pub msg: IDL_STRING,
    pub sys_msg: IDL_STRING,
    pub msg_prefix: IDL_STRING,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_SYS_ERROR_STATE = Struct_Unnamed16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub x: IDL_LONG,
    pub y: IDL_LONG,
    pub button: IDL_LONG,
    pub time: IDL_LONG,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_MOUSE_STRUCT = Struct_Unnamed17;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub arch: IDL_STRING,
    pub os: IDL_STRING,
    pub os_family: IDL_STRING,
    pub os_name: IDL_STRING,
    pub release: IDL_STRING,
    pub build_date: IDL_STRING,
    pub memory_bits: IDL_INT,
    pub file_offset_bits: IDL_INT,
}
impl ::std::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_SYS_VERSION = Struct_Unnamed18;
pub type IDL_EXIT_HANDLER_FUNC = ::std::option::Option<extern "C" fn() -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub allowed_dims: ::libc::c_short,
    pub allowed_types: ::libc::c_int,
    pub access: ::libc::c_short,
    pub convert: ::libc::c_short,
    pub pre: ::libc::c_short,
    pub post: ::libc::c_short,
    pub to_delete: IDL_VPTR,
    pub uargv: IDL_VPTR,
    pub value: IDL_ALLTYPES,
}
impl ::std::clone::Clone for Struct_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_EZ_ARG = Struct_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub title: IDL_STRING,
    pub _type: ::libc::c_int,
    pub style: ::libc::c_int,
    pub nticks: ::libc::c_int,
    pub ticklen: ::libc::c_float,
    pub thick: ::libc::c_float,
    pub range: [::libc::c_double; 2usize],
    pub crange: [::libc::c_double; 2usize],
    pub s: [::libc::c_double; 2usize],
    pub margin: [::libc::c_float; 2usize],
    pub omargin: [::libc::c_float; 2usize],
    pub window: [::libc::c_float; 2usize],
    pub region: [::libc::c_float; 2usize],
    pub charsize: ::libc::c_float,
    pub minor_ticks: ::libc::c_int,
    pub tickv: [::libc::c_double; 60usize],
    pub annot: [IDL_STRING; 60usize],
    pub gridstyle: IDL_LONG,
    pub format: [IDL_STRING; 10usize],
    pub tickinterval: ::libc::c_double,
    pub ticklayout: IDL_LONG,
    pub tickunits: [IDL_STRING; 10usize],
    pub ret_values: IDL_VPTR,
    pub log_minor_ticks: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_AXIS = Struct_Unnamed20;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed21 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed21 {
    pub unsafe fn d(&mut self) -> *mut Struct_Unnamed22 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut Struct_Unnamed23 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d_s(&mut self) -> *mut Struct_Unnamed24 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn p(&mut self) -> *mut [::libc::c_float; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d_arr(&mut self) -> *mut [::libc::c_double; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn dev(&mut self) -> *mut Struct_Unnamed25 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed21 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed22 {
    pub x: ::libc::c_float,
    pub y: ::libc::c_float,
    pub z: ::libc::c_float,
    pub h: ::libc::c_float,
}
impl ::std::clone::Clone for Struct_Unnamed22 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed23 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed24 {
    pub x: ::libc::c_double,
    pub y: ::libc::c_double,
    pub z: ::libc::c_double,
    pub h: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed24 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub z: ::libc::c_float,
    pub h: ::libc::c_float,
}
impl ::std::clone::Clone for Struct_Unnamed25 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_GR_PT = Union_Unnamed21;
pub type Enum_Unnamed26 = ::libc::c_uint;
pub const IDL_GR_PT_UNKNOWN: ::libc::c_uint = 0;
pub const IDL_GR_PT_INT_STRUCT: ::libc::c_uint = 1;
pub const IDL_GR_PT_FLOAT_STRUCT: ::libc::c_uint = 2;
pub const IDL_GR_PT_FLOAT_ARRAY: ::libc::c_uint = 3;
pub const IDL_GR_PT_DOUBLE_STRUCT: ::libc::c_uint = 4;
pub const IDL_GR_PT_DOUBLE_ARRAY: ::libc::c_uint = 5;
pub const IDL_GR_PT_DEV_STRUCT: ::libc::c_uint = 4;
pub type IDL_GR_PT_TYPE_e = Enum_Unnamed26;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed27 {
    pub _type: IDL_GR_PT_TYPE_e,
    pub coord: ::libc::c_int,
    pub pt: IDL_GR_PT,
}
impl ::std::clone::Clone for Struct_Unnamed27 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_GR_TYPED_PT = Struct_Unnamed27;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed28 {
    pub origin: IDL_GR_PT,
    pub size: IDL_GR_PT,
}
impl ::std::clone::Clone for Struct_Unnamed28 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_GR_BOX = Struct_Unnamed28;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed29 {
    pub color: IDL_ULONG,
    pub thick: ::libc::c_float,
    pub linestyle: ::libc::c_int,
    pub t: *mut ::libc::c_double,
    pub clip: *mut ::libc::c_int,
    pub ax: *mut IDL_AXIS,
    pub ay: *mut IDL_AXIS,
    pub az: *mut IDL_AXIS,
    pub chl: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed29 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed29 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_ATTR_STRUCT = Struct_Unnamed29;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed30 {
    pub font: ::libc::c_int,
    pub axes: ::libc::c_int,
    pub size: ::libc::c_float,
    pub orien: ::libc::c_float,
    pub align: ::libc::c_float,
}
impl ::std::clone::Clone for Struct_Unnamed30 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed30 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_TEXT_STRUCT = Struct_Unnamed30;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed31 {
    pub xsize_exp: ::libc::c_short,
    pub ysize_exp: ::libc::c_short,
    pub xsize: IDL_LONG,
    pub ysize: IDL_LONG,
    pub chl: ::libc::c_int,
    pub order: ::libc::c_int,
    pub color_stride: [::libc::c_int; 3usize],
    pub image_is_scratch: ::libc::c_int,
    pub b_per_pixel: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed31 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed31 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_TV_STRUCT = Struct_Unnamed31;
pub type IDL_DEVCORE_FCN_DRAW =
    ::std::option::Option<extern "C" fn(p0: *mut IDL_GR_PT,
                                        p1: *mut IDL_GR_PT,
                                        a: *mut IDL_ATTR_STRUCT) -> ()>;
pub type IDL_DEVCORE_FCN_RW_PIXELS =
    ::std::option::Option<extern "C" fn(data: *mut UCHAR, x0: ::libc::c_int,
                                        y0: ::libc::c_int, nx: ::libc::c_int,
                                        ny: ::libc::c_int, dir: ::libc::c_int,
                                        secondary: *mut IDL_TV_STRUCT) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed32 {
    pub bInterior: IDLBool_t,
    pub iNAllocEdgeLists: IDL_LONG,
    pub iNUsedEdgeLists: IDL_LONG,
    pub ppEdgeLists: *mut *mut UCHAR,
    pub iBottomY: IDL_LONG64,
    pub iTopY: IDL_LONG64,
}
impl ::std::clone::Clone for Struct_Unnamed32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_ROI_STATE = Struct_Unnamed32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed33 {
    pub fill_type: Enum_Unnamed34,
    pub attr: *mut IDL_ATTR_STRUCT,
    pub rtn: Union_Unnamed35,
    pub extra: Union_Unnamed36,
    pub three: Struct_Unnamed39,
    pub pROIState: *mut IDL_ROI_STATE,
}
impl ::std::clone::Clone for Struct_Unnamed33 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed33 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed35 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed35 {
    pub unsafe fn draw(&mut self) -> *mut IDL_DEVCORE_FCN_DRAW {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rw_pixels(&mut self) -> *mut IDL_DEVCORE_FCN_RW_PIXELS {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed35 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed35 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed36 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed36 {
    pub unsafe fn image(&mut self) -> *mut Struct_Unnamed37 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn lines(&mut self) -> *mut Struct_Unnamed38 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fill_style(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed36 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed36 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed37 {
    pub data: *mut UCHAR,
    pub d1: ::libc::c_int,
    pub d2: ::libc::c_int,
    pub im_verts: *mut ::libc::c_float,
    pub im_w: *mut ::libc::c_float,
    pub interp: UCHAR,
    pub transparent: UCHAR,
    pub im_depth: UCHAR,
}
impl ::std::clone::Clone for Struct_Unnamed37 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed37 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed38 {
    pub angle: ::libc::c_float,
    pub spacing: ::libc::c_int,
    pub ct: ::libc::c_float,
    pub st: ::libc::c_float,
}
impl ::std::clone::Clone for Struct_Unnamed38 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed38 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed39 {
    pub z: Union_Unnamed40,
    pub precision: ::libc::c_int,
    pub shades: *mut ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed39 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed39 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed40 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed40 {
    pub unsafe fn f(&mut self) -> *mut *mut ::libc::c_float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d(&mut self) -> *mut *mut ::libc::c_double {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed40 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed40 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_POLYFILL_ATTR = Struct_Unnamed33;
pub type IDL_DEVCORE_FCN_TEXT =
    ::std::option::Option<extern "C" fn(p: *mut IDL_GR_PT,
                                        ga: *mut IDL_ATTR_STRUCT,
                                        ta: *mut IDL_TEXT_STRUCT,
                                        text: *mut ::libc::c_char)
                              -> ::libc::c_int>;
pub type IDL_DEVCORE_FCN_ERASE =
    ::std::option::Option<extern "C" fn(a: *mut IDL_ATTR_STRUCT) -> ()>;
pub type IDL_DEVCORE_FCN_CURSOR =
    ::std::option::Option<extern "C" fn(funct: ::libc::c_int,
                                        m: *mut IDL_MOUSE_STRUCT) -> ()>;
pub type IDL_DEVCORE_FCN_POLYFILL =
    ::std::option::Option<extern "C" fn(x: *mut ::libc::c_int,
                                        y: *mut ::libc::c_int,
                                        n: ::libc::c_int,
                                        poly: *mut IDL_POLYFILL_ATTR) -> ()>;
pub type IDL_DEVCORE_FCN_INTER_EXIT =
    ::std::option::Option<extern "C" fn() -> ()>;
pub type IDL_DEVCORE_FCN_FLUSH = ::std::option::Option<extern "C" fn() -> ()>;
pub type IDL_DEVCORE_FCN_LOAD_COLOR =
    ::std::option::Option<extern "C" fn(start: IDL_LONG, n: IDL_LONG) -> ()>;
pub type IDL_DEVCORE_FCN_DEV_SPECIFIC =
    ::std::option::Option<extern "C" fn(argc: ::libc::c_int,
                                        argv: *mut IDL_VPTR,
                                        argk: *mut ::libc::c_char) -> ()>;
pub type IDL_DEVCORE_FCN_DEV_HELP =
    ::std::option::Option<extern "C" fn(argc: ::libc::c_int,
                                        argv: *mut IDL_VPTR) -> ()>;
pub type IDL_DEVCORE_FCN_LOAD_RTN =
    ::std::option::Option<extern "C" fn() -> ()>;
pub type IDL_DEVCORE_FCN_RESET_SESSION =
    ::std::option::Option<extern "C" fn() -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed41 {
    pub draw: IDL_DEVCORE_FCN_DRAW,
    pub text: IDL_DEVCORE_FCN_TEXT,
    pub erase: IDL_DEVCORE_FCN_ERASE,
    pub cursor: IDL_DEVCORE_FCN_CURSOR,
    pub polyfill: IDL_DEVCORE_FCN_POLYFILL,
    pub inter_exit: IDL_DEVCORE_FCN_INTER_EXIT,
    pub flush: IDL_DEVCORE_FCN_FLUSH,
    pub load_color: IDL_DEVCORE_FCN_LOAD_COLOR,
    pub rw_pixels: IDL_DEVCORE_FCN_RW_PIXELS,
    pub dev_specific: IDL_DEVCORE_FCN_DEV_SPECIFIC,
    pub dev_help: IDL_DEVCORE_FCN_DEV_HELP,
    pub load_rtn: IDL_DEVCORE_FCN_LOAD_RTN,
    pub reset_session: IDL_DEVCORE_FCN_RESET_SESSION,
}
impl ::std::clone::Clone for Struct_Unnamed41 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed41 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_DEVICE_CORE = Struct_Unnamed41;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed42 {
    pub window_create: ::std::option::Option<extern "C" fn(argc:
                                                               ::libc::c_int,
                                                           argv:
                                                               *mut IDL_VPTR,
                                                           argk:
                                                               *mut ::libc::c_char)
                                                 -> ()>,
    pub window_delete: ::std::option::Option<extern "C" fn(argc:
                                                               ::libc::c_int,
                                                           argv:
                                                               *mut IDL_VPTR)
                                                 -> ()>,
    pub window_show: ::std::option::Option<extern "C" fn(argc: ::libc::c_int,
                                                         argv: *mut IDL_VPTR,
                                                         argk:
                                                             *mut ::libc::c_char)
                                               -> ()>,
    pub window_set: ::std::option::Option<extern "C" fn(argc: ::libc::c_int,
                                                        argv: *mut IDL_VPTR)
                                              -> ()>,
    pub window_menu: ::std::option::Option<extern "C" fn(argc: ::libc::c_int,
                                                         argv: *mut IDL_VPTR,
                                                         argk:
                                                             *mut ::libc::c_char)
                                               -> IDL_VPTR>,
}
impl ::std::clone::Clone for Struct_Unnamed42 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed42 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_DEVICE_WINDOW = Struct_Unnamed42;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed43 {
    pub name: IDL_STRING,
    pub t_size: [::libc::c_int; 2usize],
    pub v_size: [::libc::c_int; 2usize],
    pub ch_size: [::libc::c_int; 2usize],
    pub px_cm: [::libc::c_float; 2usize],
    pub n_colors: ::libc::c_int,
    pub table_size: ::libc::c_int,
    pub fill_dist: ::libc::c_int,
    pub window: ::libc::c_int,
    pub unit: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub origin: [::libc::c_int; 2usize],
    pub zoom: [::libc::c_int; 2usize],
    pub aspect: ::libc::c_float,
    pub core: IDL_DEVICE_CORE,
    pub winsys: IDL_DEVICE_WINDOW,
    pub reserved: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed43 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed43 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_DEVICE_DEF = Struct_Unnamed43;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed44 {
    pub background: ::libc::c_int,
    pub charsize: ::libc::c_float,
    pub charthick: ::libc::c_float,
    pub clip: [::libc::c_int; 6usize],
    pub color: IDL_ULONG,
    pub font: ::libc::c_int,
    pub linestyle: ::libc::c_int,
    pub multi: [::libc::c_int; 5usize],
    pub clip_off: ::libc::c_int,
    pub noerase: ::libc::c_int,
    pub nsum: ::libc::c_int,
    pub position: [::libc::c_float; 4usize],
    pub psym: ::libc::c_int,
    pub region: [::libc::c_float; 4usize],
    pub subtitle: IDL_STRING,
    pub symsize: ::libc::c_float,
    pub t: [::libc::c_double; 16usize],
    pub t3d_on: ::libc::c_int,
    pub thick: ::libc::c_float,
    pub title: IDL_STRING,
    pub ticklen: ::libc::c_float,
    pub chl: ::libc::c_int,
    pub sr_restore_pad: ::libc::c_double,
    pub dev: *mut IDL_DEVICE_DEF,
}
impl ::std::clone::Clone for Struct_Unnamed44 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed44 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_PLOT_COM = Struct_Unnamed44;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed45 {
    pub keyword: *const ::libc::c_char,
    pub _type: UCHAR,
    pub mask: ::libc::c_ushort,
    pub flags: ::libc::c_ushort,
    pub specified: *mut ::libc::c_int,
    pub value: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed45 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed45 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_KW_PAR = Struct_Unnamed45;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed46 {
    pub data: *mut ::libc::c_char,
    pub nmin: IDL_LONG64,
    pub nmax: IDL_LONG64,
    pub n: IDL_LONG64,
}
impl ::std::clone::Clone for Struct_Unnamed46 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed46 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_KW_ARR_DESC = Struct_Unnamed46;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed47 {
    pub data: *mut ::libc::c_char,
    pub nmin: IDL_LONG64,
    pub nmax: IDL_LONG64,
    pub n_offset: *mut IDL_LONG64,
}
impl ::std::clone::Clone for Struct_Unnamed47 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed47 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_KW_ARR_DESC_R = Struct_Unnamed47;
pub type IDL_ATIME_BUF = [::libc::c_char; 25usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed48 {
    pub logname: *mut ::libc::c_char,
    pub homedir: *mut ::libc::c_char,
    pub pid: *mut ::libc::c_char,
    pub host: [::libc::c_char; 64usize],
    pub wd: [::libc::c_char; 1025usize],
    pub date: IDL_ATIME_BUF,
}
impl ::std::clone::Clone for Struct_Unnamed48 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed48 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_USER_INFO = Struct_Unnamed48;
pub type Enum_Unnamed49 = ::libc::c_uint;
pub const IDL_GETKBRD_T_CH: ::libc::c_uint = 0;
pub const IDL_GETKBRD_T_CH_OR_ESC: ::libc::c_uint = 1;
pub const IDL_GETKBRD_T_CH_OR_NAME: ::libc::c_uint = 2;
pub type IDL_GETKBRD_T = Enum_Unnamed49;
pub type IDL_GETKBRD_BUFFER = [::libc::c_char; 128usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed50 {
    pub unit: ::libc::c_int,
    pub curcol: ::libc::c_int,
    pub wrap: ::libc::c_int,
    pub leading: *mut ::libc::c_char,
    pub leading_len: ::libc::c_int,
    pub buf: *mut ::libc::c_char,
    pub max_len: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed50 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed50 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_POUT_CNTRL = Struct_Unnamed50;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_idl_heap_variable {
    pub hash: *mut Struct_idl_heap_variable,
    pub hash_id: IDL_HVID,
    pub refcount: IDL_LONG,
    pub flags: ::libc::c_int,
    pub var: IDL_VARIABLE,
}
impl ::std::clone::Clone for Struct_idl_heap_variable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_idl_heap_variable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_HEAP_VARIABLE = Struct_idl_heap_variable;
pub type IDL_HEAP_VPTR = *mut IDL_HEAP_VARIABLE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed51 {
    pub fb: *mut UCHAR,
    pub nx: ::libc::c_int,
    pub ny: ::libc::c_int,
    pub bytes_line: ::libc::c_int,
    pub byte_padding: ::libc::c_int,
    pub dot_width: ::libc::c_int,
    pub dither_method: ::libc::c_int,
    pub dither_threshold: ::libc::c_int,
    pub bit_tab: [UCHAR; 8usize],
    pub flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed51 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed51 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_RASTER_DEF = Struct_Unnamed51;
pub type IDL_SFILE_FLAGS_T = IDL_LONG;
pub type IDL_SFILE_PIPE_EXIT_STATUS = IDL_LONG;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed52 {
    pub access: IDL_LONG64,
    pub create: IDL_LONG64,
    pub _mod: IDL_LONG64,
}
impl ::std::clone::Clone for Struct_Unnamed52 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed52 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_SFILE_STAT_TIME = Struct_Unnamed52;
pub type sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_thread_state {
    pub __eax: ::libc::c_uint,
    pub __ebx: ::libc::c_uint,
    pub __ecx: ::libc::c_uint,
    pub __edx: ::libc::c_uint,
    pub __edi: ::libc::c_uint,
    pub __esi: ::libc::c_uint,
    pub __ebp: ::libc::c_uint,
    pub __esp: ::libc::c_uint,
    pub __ss: ::libc::c_uint,
    pub __eflags: ::libc::c_uint,
    pub __eip: ::libc::c_uint,
    pub __cs: ::libc::c_uint,
    pub __ds: ::libc::c_uint,
    pub __es: ::libc::c_uint,
    pub __fs: ::libc::c_uint,
    pub __gs: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_i386_thread_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_thread_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_control {
    pub _bindgen_bitfield_1_: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_control {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_control {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_control_t = Struct___darwin_fp_control;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_status {
    pub _bindgen_bitfield_1_: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_status {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_status_t = Struct___darwin_fp_status;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mmst_reg {
    pub __mmst_reg: [::libc::c_char; 10usize],
    pub __mmst_rsrv: [::libc::c_char; 6usize],
}
impl ::std::clone::Clone for Struct___darwin_mmst_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mmst_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_xmm_reg {
    pub __xmm_reg: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct___darwin_xmm_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_xmm_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_float_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_i386_float_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_avx_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_i386_avx_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
impl ::std::clone::Clone for Struct___darwin_i386_exception_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_exception_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state32 {
    pub __dr0: ::libc::c_uint,
    pub __dr1: ::libc::c_uint,
    pub __dr2: ::libc::c_uint,
    pub __dr3: ::libc::c_uint,
    pub __dr4: ::libc::c_uint,
    pub __dr5: ::libc::c_uint,
    pub __dr6: ::libc::c_uint,
    pub __dr7: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_thread_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_thread_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_float_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_x86_float_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_float_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_avx_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
    pub __fpu_ymmh8: Struct___darwin_xmm_reg,
    pub __fpu_ymmh9: Struct___darwin_xmm_reg,
    pub __fpu_ymmh10: Struct___darwin_xmm_reg,
    pub __fpu_ymmh11: Struct___darwin_xmm_reg,
    pub __fpu_ymmh12: Struct___darwin_xmm_reg,
    pub __fpu_ymmh13: Struct___darwin_xmm_reg,
    pub __fpu_ymmh14: Struct___darwin_xmm_reg,
    pub __fpu_ymmh15: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_x86_avx_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_avx_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_exception_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_exception_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_float_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_avx_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_float_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_avx_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mcontext_t = *mut Struct___darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_sigaltstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_sigaltstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = Struct___darwin_sigaltstack;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_ucontext {
    pub uc_onstack: ::libc::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: Struct___darwin_sigaltstack,
    pub uc_link: *mut Struct___darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut Struct___darwin_mcontext64,
}
impl ::std::clone::Clone for Struct___darwin_ucontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_ucontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = Struct___darwin_ucontext;
pub type pid_t = __darwin_pid_t;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_sigval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigevent {
    pub sigev_notify: ::libc::c_int,
    pub sigev_signo: ::libc::c_int,
    pub sigev_value: Union_sigval,
    pub sigev_notify_function: ::std::option::Option<extern "C" fn(arg1:
                                                                       Union_sigval)
                                                         -> ()>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
impl ::std::clone::Clone for Struct_sigevent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___siginfo {
    pub si_signo: ::libc::c_int,
    pub si_errno: ::libc::c_int,
    pub si_code: ::libc::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::libc::c_int,
    pub si_addr: *mut ::libc::c_void,
    pub si_value: Union_sigval,
    pub si_band: ::libc::c_long,
    pub __pad: [::libc::c_ulong; 7usize],
}
impl ::std::clone::Clone for Struct___siginfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___siginfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = Struct___siginfo;
#[repr(C)]
#[derive(Copy)]
pub struct Union___sigaction_u {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union___sigaction_u {
    pub unsafe fn __sa_handler(&mut self)
     -> *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                                  arg2: *mut Struct___siginfo,
                                                  arg3: *mut ::libc::c_void)
                                        -> ()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___sigaction_u {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___sigaction_u {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_tramp: ::std::option::Option<extern "C" fn(arg1:
                                                          *mut ::libc::c_void,
                                                      arg2: ::libc::c_int,
                                                      arg3: ::libc::c_int,
                                                      arg4: *mut siginfo_t,
                                                      arg5:
                                                          *mut ::libc::c_void)
                                            -> ()>,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sig_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigvec {
    pub sv_handler: ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                              -> ()>,
    pub sv_mask: ::libc::c_int,
    pub sv_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigvec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigvec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::libc::c_char,
    pub ss_onstack: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_t = __darwin_pthread_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed53 {
    pub set: [::libc::c_double; 4usize],
}
impl ::std::clone::Clone for Struct_Unnamed53 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed53 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_SignalSet_t = Struct_Unnamed53;
pub type IDL_SignalHandler_t =
    ::std::option::Option<extern "C" fn(signo: ::libc::c_int) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed54 {
    pub name: *mut ::libc::c_char,
    pub dims: *mut IDL_LONG64,
    pub _type: *mut ::libc::c_void,
    pub flags: UCHAR,
}
impl ::std::clone::Clone for Struct_Unnamed54 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed54 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_STRUCT_TAG_DEF = Struct_Unnamed54;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed55 {
    pub funct_addr: IDL_SYSRTN_GENERIC,
    pub name: *mut ::libc::c_char,
    pub arg_min: UCHAR,
    pub arg_max: UCHAR,
    pub flags: UCHAR,
}
impl ::std::clone::Clone for Struct_Unnamed55 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed55 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_SYSFUN_DEF = Struct_Unnamed55;
pub type IDL_TOUT_OUTF =
    ::std::option::Option<extern "C" fn(flags: ::libc::c_int,
                                        buf: *mut ::libc::c_char,
                                        n: ::libc::c_int) -> ()>;
pub type IDL_INIT_DATA_OPTIONS_T = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed56 {
    pub options: IDL_INIT_DATA_OPTIONS_T,
    pub clargs: Struct_Unnamed57,
    pub applic: *mut *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed56 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed56 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed57 {
    pub argc: ::libc::c_int,
    pub argv: *mut *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed57 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed57 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_INIT_DATA = Struct_Unnamed56;
pub type IDL_WIDGET_STUB_SET_SIZE_FUNC =
    ::std::option::Option<extern "C" fn(id: IDL_ULONG, width: ::libc::c_int,
                                        height: ::libc::c_int) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed58 {
    pub name: *mut ::libc::c_char,
    pub is_tty: ::libc::c_char,
    pub lines: ::libc::c_int,
    pub columns: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed58 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed58 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_TERMINFO = Struct_Unnamed58;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed59 {
    pub name: *mut ::libc::c_char,
    pub access: ::libc::c_short,
    pub flags: IDL_SFILE_FLAGS_T,
    pub fptr: *mut FILE,
}
impl ::std::clone::Clone for Struct_Unnamed59 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed59 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type IDL_FILE_STAT = Struct_Unnamed59;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::libc::c_int;
pub type mbstate_t = __darwin_mbstate_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type wint_t = __darwin_wint_t;
pub type wctype_t = __darwin_wctype_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed60 {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed60 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed60 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _RuneEntry = Struct_Unnamed60;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed61 {
    pub __nranges: ::libc::c_int,
    pub __ranges: *mut _RuneEntry,
}
impl ::std::clone::Clone for Struct_Unnamed61 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed61 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _RuneRange = Struct_Unnamed61;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed62 {
    pub __name: [::libc::c_char; 14usize],
    pub __mask: __uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed62 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed62 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _RuneCharClass = Struct_Unnamed62;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed63 {
    pub __magic: [::libc::c_char; 8usize],
    pub __encoding: [::libc::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<extern "C" fn(arg1:
                                                            *const ::libc::c_char,
                                                        arg2: __darwin_size_t,
                                                        arg3:
                                                            *mut *const ::libc::c_char)
                                              -> __darwin_rune_t>,
    pub __sputrune: ::std::option::Option<extern "C" fn(arg1: __darwin_rune_t,
                                                        arg2:
                                                            *mut ::libc::c_char,
                                                        arg3: __darwin_size_t,
                                                        arg4:
                                                            *mut *mut ::libc::c_char)
                                              -> ::libc::c_int>,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::libc::c_void,
    pub __variable_len: ::libc::c_int,
    pub __ncharclasses: ::libc::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
impl ::std::clone::Clone for Struct_Unnamed63 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed63 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _RuneLocale = Struct_Unnamed63;
pub type wctrans_t = __darwin_wctrans_t;
pub type IDL_TIMER_CB = ::std::option::Option<extern "C" fn() -> ()>;
pub type IDL_TIMER_CONTEXT = IDL_TIMER_CB;
pub type IDL_TIMER_CONTEXT_PTR = *mut IDL_TIMER_CONTEXT;
extern "C" {
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mut sys_signame: [*const ::libc::c_char; 32usize];
    pub static mut sys_siglist: [*const ::libc::c_char; 32usize];
    pub static mut tzname: *mut *mut ::libc::c_char;
    pub static mut getdate_err: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
    pub static mut daylight: ::libc::c_int;
    pub static mut _DefaultRuneLocale: _RuneLocale;
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
    pub static mut IDL_OutputFormat: *mut *mut ::libc::c_char;
    pub static mut IDL_OutputFormatLen: *mut ::libc::c_int;
    pub static mut IDL_OutputFormatFull: *mut *mut ::libc::c_char;
    pub static mut IDL_OutputFormatFullLen: *mut ::libc::c_int;
    pub static mut IDL_OutputFormatNatural: *mut *mut ::libc::c_char;
    pub static mut IDL_TypeSize: *mut IDL_LONG;
    pub static mut IDL_TypeName: *mut *mut ::libc::c_char;
    pub static mut IDL_zero: IDL_ALLTYPES;
    pub static mut IDL_FileTerm: IDL_TERMINFO;
    pub static mut IDL_DitherMethodNames: *mut *mut ::libc::c_char;
    pub static mut IDL_PlotCom: IDL_PLOT_COM;
    pub static mut IDL_ColorMap: *mut UCHAR;
    pub static mut IDL_SysvVersion: IDL_SYS_VERSION;
    pub static mut IDL_SysvCpu: IDL_CPU_STRUCT;
    pub static mut IDL_ProgramName: *mut ::libc::c_char;
    pub static mut IDL_ProgramNameLC: *mut ::libc::c_char;
    pub static mut IDL_SysvDir: IDL_STRING;
    pub static mut IDL_SysvErrCode: IDL_LONG;
    pub static mut IDL_SysvErrorState: IDL_SYS_ERROR_STATE;
    pub static mut IDL_SysvOrder: IDL_LONG;
}
extern "C" {
    pub fn renameat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: ::libc::c_int, arg4: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn clearerr(arg1: *mut FILE) -> ();
    pub fn fclose(arg1: *mut FILE) -> ::libc::c_int;
    pub fn feof(arg1: *mut FILE) -> ::libc::c_int;
    pub fn ferror(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fflush(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fgetc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::libc::c_int;
    pub fn fgets(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                 arg3: *mut FILE) -> *mut ::libc::c_char;
    pub fn fopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fputc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn fputs(arg1: *const ::libc::c_char, arg2: *mut FILE)
     -> ::libc::c_int;
    pub fn fread(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4: *mut FILE) -> size_t;
    pub fn freopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut FILE) -> *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fseek(arg1: *mut FILE, arg2: ::libc::c_long, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::libc::c_int;
    pub fn ftell(arg1: *mut FILE) -> ::libc::c_long;
    pub fn fwrite(arg1: *const ::libc::c_void, arg2: size_t, arg3: size_t,
                  arg4: *mut FILE) -> size_t;
    pub fn getc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn gets(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn perror(arg1: *const ::libc::c_char) -> ();
    pub fn printf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn putc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn putchar(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn puts(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn remove(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rewind(arg1: *mut FILE) -> ();
    pub fn scanf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char) -> ();
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char,
                   arg3: ::libc::c_int, arg4: size_t) -> ::libc::c_int;
    pub fn sprintf(arg1: *mut ::libc::c_char,
                   arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(arg1: *const ::libc::c_char,
                  arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ungetc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn vprintf(arg1: *const ::libc::c_char, arg2: va_list)
     -> ::libc::c_int;
    pub fn vsprintf(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn ctermid(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fdopen(arg1: ::libc::c_int, arg2: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> ::libc::c_int;
    pub fn pclose(arg1: *mut FILE) -> ::libc::c_int;
    pub fn popen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> ::libc::c_int;
    pub fn __svfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                      arg3: va_list) -> ::libc::c_int;
    pub fn __swbuf(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn __sputc(_c: ::libc::c_int, _p: *mut FILE) -> ::libc::c_int;
    pub fn flockfile(arg1: *mut FILE) -> ();
    pub fn ftrylockfile(arg1: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(arg1: *mut FILE) -> ();
    pub fn getc_unlocked(arg1: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn putc_unlocked(arg1: ::libc::c_int, arg2: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(arg1: *mut FILE) -> ::libc::c_int;
    pub fn putw(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn tempnam(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ftello(arg1: *mut FILE) -> off_t;
    pub fn snprintf(arg1: *mut ::libc::c_char, arg2: size_t,
                    arg3: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                   arg3: va_list) -> ::libc::c_int;
    pub fn vscanf(arg1: *const ::libc::c_char, arg2: va_list)
     -> ::libc::c_int;
    pub fn vsnprintf(arg1: *mut ::libc::c_char, arg2: size_t,
                     arg3: *const ::libc::c_char, arg4: va_list)
     -> ::libc::c_int;
    pub fn vsscanf(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: va_list) -> ::libc::c_int;
    pub fn dprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn vdprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn getdelim(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t,
                    arg3: ::libc::c_int, arg4: *mut FILE) -> ssize_t;
    pub fn getline(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t,
                   arg3: *mut FILE) -> ssize_t;
    pub fn asprintf(arg1: *mut *mut ::libc::c_char,
                    arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn ctermid_r(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::libc::c_char;
    pub fn fmtcheck(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn fpurge(arg1: *mut FILE) -> ::libc::c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::libc::c_char,
                     arg3: ::libc::c_int) -> ();
    pub fn setlinebuf(arg1: *mut FILE) -> ::libc::c_int;
    pub fn vasprintf(arg1: *mut *mut ::libc::c_char,
                     arg2: *const ::libc::c_char, arg3: va_list)
     -> ::libc::c_int;
    pub fn zopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                 arg3: ::libc::c_int) -> *mut FILE;
    pub fn funopen(arg1: *const ::libc::c_void,
                   arg2:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *mut ::libc::c_char,
                                                           arg3:
                                                               ::libc::c_int)
                                                 -> ::libc::c_int>,
                   arg3:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_char,
                                                           arg3:
                                                               ::libc::c_int)
                                                 -> ::libc::c_int>,
                   arg4:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2: fpos_t,
                                                           arg3:
                                                               ::libc::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void)
                                                 -> ::libc::c_int>)
     -> *mut FILE;
    pub fn __sprintf_chk(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                         arg3: size_t, arg4: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn __snprintf_chk(arg1: *mut ::libc::c_char, arg2: size_t,
                          arg3: ::libc::c_int, arg4: size_t,
                          arg5: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn __vsprintf_chk(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                          arg3: size_t, arg4: *const ::libc::c_char,
                          arg5: va_list) -> ::libc::c_int;
    pub fn __vsnprintf_chk(arg1: *mut ::libc::c_char, arg2: size_t,
                           arg3: ::libc::c_int, arg4: size_t,
                           arg5: *const ::libc::c_char, arg6: va_list)
     -> ::libc::c_int;
    pub fn IDL_KWGetParams(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                           argk: *mut ::libc::c_char,
                           kw_list: *mut IDL_KW_PAR,
                           plain_args: *mut IDL_VPTR, mask: ::libc::c_int)
     -> ::libc::c_int;
    pub fn IDL_KWCleanup(fcn: ::libc::c_int) -> ();
    pub fn signal(arg1: ::libc::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                                -> ()>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::libc::c_int)
                                                                           ->
                                                                               ()>)
                                   -> ()>;
    pub fn raise(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn bsd_signal(arg1: ::libc::c_int,
                      arg2:
                          ::std::option::Option<extern "C" fn(arg1:
                                                                  ::libc::c_int)
                                                    -> ()>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::libc::c_int)
                                                                           ->
                                                                               ()>)
                                   -> ()>;
    pub fn kill(arg1: pid_t, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn killpg(arg1: pid_t, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_kill(arg1: pthread_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_sigmask(arg1: ::libc::c_int, arg2: *const sigset_t,
                           arg3: *mut sigset_t) -> ::libc::c_int;
    pub fn sigaction(arg1: ::libc::c_int, arg2: *const Struct_sigaction,
                     arg3: *mut Struct_sigaction) -> ::libc::c_int;
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t)
     -> ::libc::c_int;
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::libc::c_int;
    pub fn sigfillset(arg1: *mut sigset_t) -> ::libc::c_int;
    pub fn sighold(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigignore(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn siginterrupt(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigismember(arg1: *const sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigpause(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigpending(arg1: *mut sigset_t) -> ::libc::c_int;
    pub fn sigprocmask(arg1: ::libc::c_int, arg2: *const sigset_t,
                       arg3: *mut sigset_t) -> ::libc::c_int;
    pub fn sigrelse(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigset(arg1: ::libc::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                                -> ()>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::libc::c_int)
                                                                           ->
                                                                               ()>)
                                   -> ()>;
    pub fn sigsuspend(arg1: *const sigset_t) -> ::libc::c_int;
    pub fn sigwait(arg1: *const sigset_t, arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn psignal(arg1: ::libc::c_uint, arg2: *const ::libc::c_char) -> ();
    pub fn sigblock(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigsetmask(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigvec(arg1: ::libc::c_int, arg2: *mut Struct_sigvec,
                  arg3: *mut Struct_sigvec) -> ::libc::c_int;
    pub fn __sigbits(__signo: ::libc::c_int) -> ::libc::c_int;
    pub fn memchr(arg1: *const ::libc::c_void, arg2: ::libc::c_int,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn memcmp(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                  arg3: size_t) -> ::libc::c_int;
    pub fn memcpy(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn memmove(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: size_t) -> *mut ::libc::c_void;
    pub fn memset(arg1: *mut ::libc::c_void, arg2: ::libc::c_int,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn strcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strcmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strcoll(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strcspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> size_t;
    pub fn strerror(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strlen(arg1: *const ::libc::c_char) -> size_t;
    pub fn strncat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strncmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> ::libc::c_int;
    pub fn strncpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strpbrk(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strrchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> size_t;
    pub fn strstr(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strtok(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strxfrm(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn strtok_r(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strerror_r(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                      arg3: size_t) -> ::libc::c_int;
    pub fn strdup(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn memccpy(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: ::libc::c_int, arg4: size_t) -> *mut ::libc::c_void;
    pub fn stpcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpncpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strndup(arg1: *const ::libc::c_char, arg2: size_t)
     -> *mut ::libc::c_char;
    pub fn strnlen(arg1: *const ::libc::c_char, arg2: size_t) -> size_t;
    pub fn strsignal(sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn memset_s(arg1: *mut ::libc::c_void, arg2: rsize_t,
                    arg3: ::libc::c_int, arg4: rsize_t) -> errno_t;
    pub fn memmem(arg1: *const ::libc::c_void, arg2: size_t,
                  arg3: *const ::libc::c_void, arg4: size_t)
     -> *mut ::libc::c_void;
    pub fn memset_pattern4(arg1: *mut ::libc::c_void,
                           arg2: *const ::libc::c_void, arg3: size_t) -> ();
    pub fn memset_pattern8(arg1: *mut ::libc::c_void,
                           arg2: *const ::libc::c_void, arg3: size_t) -> ();
    pub fn memset_pattern16(arg1: *mut ::libc::c_void,
                            arg2: *const ::libc::c_void, arg3: size_t) -> ();
    pub fn strcasestr(arg1: *const ::libc::c_char,
                      arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strnstr(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strlcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn strlcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn strmode(arg1: ::libc::c_int, arg2: *mut ::libc::c_char) -> ();
    pub fn strsep(arg1: *mut *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn swab(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void,
                arg3: ssize_t) -> ();
    pub fn bcmp(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                arg3: size_t) -> ::libc::c_int;
    pub fn bcopy(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void,
                 arg3: size_t) -> ();
    pub fn bzero(arg1: *mut ::libc::c_void, arg2: size_t) -> ();
    pub fn index(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn rindex(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn ffs(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(arg1: *const ::libc::c_char,
                      arg2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(arg1: *const ::libc::c_char,
                       arg2: *const ::libc::c_char, arg3: size_t)
     -> ::libc::c_int;
    pub fn ffsl(arg1: ::libc::c_long) -> ::libc::c_int;
    pub fn ffsll(arg1: ::libc::c_longlong) -> ::libc::c_int;
    pub fn fls(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn flsl(arg1: ::libc::c_long) -> ::libc::c_int;
    pub fn flsll(arg1: ::libc::c_longlong) -> ::libc::c_int;
    pub fn asctime(arg1: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn clock() -> clock_t;
    pub fn ctime(arg1: *const time_t) -> *mut ::libc::c_char;
    pub fn difftime(arg1: time_t, arg2: time_t) -> ::libc::c_double;
    pub fn getdate(arg1: *const ::libc::c_char) -> *mut Struct_tm;
    pub fn gmtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn localtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn mktime(arg1: *mut Struct_tm) -> time_t;
    pub fn strftime(arg1: *mut ::libc::c_char, arg2: size_t,
                    arg3: *const ::libc::c_char, arg4: *const Struct_tm)
     -> size_t;
    pub fn strptime(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut Struct_tm) -> *mut ::libc::c_char;
    pub fn time(arg1: *mut time_t) -> time_t;
    pub fn tzset() -> ();
    pub fn asctime_r(arg1: *const Struct_tm, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn ctime_r(arg1: *const time_t, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(arg1: *const time_t, arg2: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn posix2time(arg1: time_t) -> time_t;
    pub fn tzsetwall() -> ();
    pub fn time2posix(arg1: time_t) -> time_t;
    pub fn timelocal(arg1: *mut Struct_tm) -> time_t;
    pub fn timegm(arg1: *mut Struct_tm) -> time_t;
    pub fn nanosleep(arg1: *const Struct_timespec, arg2: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::libc::c_ulong;
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn isascii(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn __maskrune(arg1: __darwin_ct_rune_t, arg2: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn __istype(_c: __darwin_ct_rune_t, _f: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn __isctype(_c: __darwin_ct_rune_t, _f: ::libc::c_ulong)
     -> __darwin_ct_rune_t;
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn __wcwidth(_c: __darwin_ct_rune_t) -> ::libc::c_int;
    pub fn isalnum(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isalpha(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isblank(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn iscntrl(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isdigit(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isgraph(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn islower(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isprint(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn ispunct(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isspace(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isupper(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isxdigit(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn toascii(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn tolower(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn toupper(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn digittoint(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn ishexnumber(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isideogram(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isnumber(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isphonogram(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isrune(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn isspecial(_c: ::libc::c_int) -> ::libc::c_int;
    pub fn iswalnum(_wc: wint_t) -> ::libc::c_int;
    pub fn iswalpha(_wc: wint_t) -> ::libc::c_int;
    pub fn iswcntrl(_wc: wint_t) -> ::libc::c_int;
    pub fn iswctype(_wc: wint_t, _charclass: wctype_t) -> ::libc::c_int;
    pub fn iswdigit(_wc: wint_t) -> ::libc::c_int;
    pub fn iswgraph(_wc: wint_t) -> ::libc::c_int;
    pub fn iswlower(_wc: wint_t) -> ::libc::c_int;
    pub fn iswprint(_wc: wint_t) -> ::libc::c_int;
    pub fn iswpunct(_wc: wint_t) -> ::libc::c_int;
    pub fn iswspace(_wc: wint_t) -> ::libc::c_int;
    pub fn iswupper(_wc: wint_t) -> ::libc::c_int;
    pub fn iswxdigit(_wc: wint_t) -> ::libc::c_int;
    pub fn towlower(_wc: wint_t) -> wint_t;
    pub fn towupper(_wc: wint_t) -> wint_t;
    pub fn wctype(arg1: *const ::libc::c_char) -> wctype_t;
    pub fn btowc(arg1: ::libc::c_int) -> wint_t;
    pub fn fgetwc(arg1: *mut FILE) -> wint_t;
    pub fn fgetws(arg1: *mut wchar_t, arg2: ::libc::c_int, arg3: *mut FILE)
     -> *mut wchar_t;
    pub fn fputwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
    pub fn fputws(arg1: *const wchar_t, arg2: *mut FILE) -> ::libc::c_int;
    pub fn fwide(arg1: *mut FILE, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn fwprintf(arg1: *mut FILE, arg2: *const wchar_t, ...)
     -> ::libc::c_int;
    pub fn fwscanf(arg1: *mut FILE, arg2: *const wchar_t, ...)
     -> ::libc::c_int;
    pub fn getwc(arg1: *mut FILE) -> wint_t;
    pub fn getwchar() -> wint_t;
    pub fn mbrlen(arg1: *const ::libc::c_char, arg2: size_t,
                  arg3: *mut mbstate_t) -> size_t;
    pub fn mbrtowc(arg1: *mut wchar_t, arg2: *const ::libc::c_char,
                   arg3: size_t, arg4: *mut mbstate_t) -> size_t;
    pub fn mbsinit(arg1: *const mbstate_t) -> ::libc::c_int;
    pub fn mbsrtowcs(arg1: *mut wchar_t, arg2: *mut *const ::libc::c_char,
                     arg3: size_t, arg4: *mut mbstate_t) -> size_t;
    pub fn putwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
    pub fn putwchar(arg1: wchar_t) -> wint_t;
    pub fn swprintf(arg1: *mut wchar_t, arg2: size_t,
                    arg3: *const wchar_t, ...) -> ::libc::c_int;
    pub fn swscanf(arg1: *const wchar_t, arg2: *const wchar_t, ...)
     -> ::libc::c_int;
    pub fn ungetwc(arg1: wint_t, arg2: *mut FILE) -> wint_t;
    pub fn vfwprintf(arg1: *mut FILE, arg2: *const wchar_t,
                     arg3: __darwin_va_list) -> ::libc::c_int;
    pub fn vswprintf(arg1: *mut wchar_t, arg2: size_t, arg3: *const wchar_t,
                     arg4: __darwin_va_list) -> ::libc::c_int;
    pub fn vwprintf(arg1: *const wchar_t, arg2: __darwin_va_list)
     -> ::libc::c_int;
    pub fn wcrtomb(arg1: *mut ::libc::c_char, arg2: wchar_t,
                   arg3: *mut mbstate_t) -> size_t;
    pub fn wcscat(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
    pub fn wcschr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
    pub fn wcscmp(arg1: *const wchar_t, arg2: *const wchar_t)
     -> ::libc::c_int;
    pub fn wcscoll(arg1: *const wchar_t, arg2: *const wchar_t)
     -> ::libc::c_int;
    pub fn wcscpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
    pub fn wcscspn(arg1: *const wchar_t, arg2: *const wchar_t) -> size_t;
    pub fn wcsftime(arg1: *mut wchar_t, arg2: size_t, arg3: *const wchar_t,
                    arg4: *const Struct_tm) -> size_t;
    pub fn wcslen(arg1: *const wchar_t) -> size_t;
    pub fn wcsncat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t)
     -> *mut wchar_t;
    pub fn wcsncmp(arg1: *const wchar_t, arg2: *const wchar_t, arg3: size_t)
     -> ::libc::c_int;
    pub fn wcsncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t)
     -> *mut wchar_t;
    pub fn wcspbrk(arg1: *const wchar_t, arg2: *const wchar_t)
     -> *mut wchar_t;
    pub fn wcsrchr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
    pub fn wcsrtombs(arg1: *mut ::libc::c_char, arg2: *mut *const wchar_t,
                     arg3: size_t, arg4: *mut mbstate_t) -> size_t;
    pub fn wcsspn(arg1: *const wchar_t, arg2: *const wchar_t) -> size_t;
    pub fn wcsstr(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
    pub fn wcsxfrm(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t)
     -> size_t;
    pub fn wctob(arg1: wint_t) -> ::libc::c_int;
    pub fn wcstod(arg1: *const wchar_t, arg2: *mut *mut wchar_t)
     -> ::libc::c_double;
    pub fn wcstok(arg1: *mut wchar_t, arg2: *const wchar_t,
                  arg3: *mut *mut wchar_t) -> *mut wchar_t;
    pub fn wcstol(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                  arg3: ::libc::c_int) -> ::libc::c_long;
    pub fn wcstoul(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                   arg3: ::libc::c_int) -> ::libc::c_ulong;
    pub fn wmemchr(arg1: *const wchar_t, arg2: wchar_t, arg3: size_t)
     -> *mut wchar_t;
    pub fn wmemcmp(arg1: *const wchar_t, arg2: *const wchar_t, arg3: size_t)
     -> ::libc::c_int;
    pub fn wmemcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t)
     -> *mut wchar_t;
    pub fn wmemmove(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t)
     -> *mut wchar_t;
    pub fn wmemset(arg1: *mut wchar_t, arg2: wchar_t, arg3: size_t)
     -> *mut wchar_t;
    pub fn wprintf(arg1: *const wchar_t, ...) -> ::libc::c_int;
    pub fn wscanf(arg1: *const wchar_t, ...) -> ::libc::c_int;
    pub fn wcswidth(arg1: *const wchar_t, arg2: size_t) -> ::libc::c_int;
    pub fn wcwidth(arg1: wchar_t) -> ::libc::c_int;
    pub fn vfwscanf(arg1: *mut FILE, arg2: *const wchar_t,
                    arg3: __darwin_va_list) -> ::libc::c_int;
    pub fn vswscanf(arg1: *const wchar_t, arg2: *const wchar_t,
                    arg3: __darwin_va_list) -> ::libc::c_int;
    pub fn vwscanf(arg1: *const wchar_t, arg2: __darwin_va_list)
     -> ::libc::c_int;
    pub fn wcstof(arg1: *const wchar_t, arg2: *mut *mut wchar_t)
     -> ::libc::c_float;
    pub fn wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t)
     -> ::libc::c_double;
    pub fn wcstoll(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                   arg3: ::libc::c_int) -> ::libc::c_longlong;
    pub fn wcstoull(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                    arg3: ::libc::c_int) -> ::libc::c_ulonglong;
    pub fn mbsnrtowcs(arg1: *mut wchar_t, arg2: *mut *const ::libc::c_char,
                      arg3: size_t, arg4: size_t, arg5: *mut mbstate_t)
     -> size_t;
    pub fn wcpcpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
    pub fn wcpncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t)
     -> *mut wchar_t;
    pub fn wcsdup(arg1: *const wchar_t) -> *mut wchar_t;
    pub fn wcscasecmp(arg1: *const wchar_t, arg2: *const wchar_t)
     -> ::libc::c_int;
    pub fn wcsncasecmp(arg1: *const wchar_t, arg2: *const wchar_t, n: size_t)
     -> ::libc::c_int;
    pub fn wcsnlen(arg1: *const wchar_t, arg2: size_t) -> size_t;
    pub fn wcsnrtombs(arg1: *mut ::libc::c_char, arg2: *mut *const wchar_t,
                      arg3: size_t, arg4: size_t, arg5: *mut mbstate_t)
     -> size_t;
    pub fn fgetwln(arg1: *mut FILE, arg2: *mut size_t) -> *mut wchar_t;
    pub fn wcslcat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t)
     -> size_t;
    pub fn wcslcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: size_t)
     -> size_t;
    pub fn iswblank(_wc: wint_t) -> ::libc::c_int;
    pub fn iswascii(_wc: wint_t) -> ::libc::c_int;
    pub fn iswhexnumber(_wc: wint_t) -> ::libc::c_int;
    pub fn iswideogram(_wc: wint_t) -> ::libc::c_int;
    pub fn iswnumber(_wc: wint_t) -> ::libc::c_int;
    pub fn iswphonogram(_wc: wint_t) -> ::libc::c_int;
    pub fn iswrune(_wc: wint_t) -> ::libc::c_int;
    pub fn iswspecial(_wc: wint_t) -> ::libc::c_int;
    pub fn nextwctype(arg1: wint_t, arg2: wctype_t) -> wint_t;
    pub fn towctrans(arg1: wint_t, arg2: wctrans_t) -> wint_t;
    pub fn wctrans(arg1: *const ::libc::c_char) -> wctrans_t;
    pub fn IDL_Win32MessageLoop(fFlush: ::libc::c_int) -> ();
    pub fn IDL_GetExitStatus() -> ::libc::c_int;
    pub fn IDL_BailOut(stop: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_Cleanup(just_cleanup: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_Initialize(init_data: *mut IDL_INIT_DATA) -> ::libc::c_int;
    pub fn IDL_Init(options: IDL_INIT_DATA_OPTIONS_T,
                    argc: *mut ::libc::c_int, argv: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn IDL_Win32Init(iOpts: IDL_INIT_DATA_OPTIONS_T,
                         hinstExe: *mut ::libc::c_void,
                         hwndExe: *mut ::libc::c_void,
                         hAccel: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn IDL_Main(options: IDL_INIT_DATA_OPTIONS_T, argc: ::libc::c_int,
                    argv: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn IDL_ExecuteStr(cmd: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn IDL_Execute(argc: ::libc::c_int, argv: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn IDL_RuntimeExec(file: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn IDL_Runtime(options: IDL_INIT_DATA_OPTIONS_T,
                       argc: *mut ::libc::c_int,
                       argv: *mut *mut ::libc::c_char,
                       file: *mut ::libc::c_char) -> ();
    pub fn IDL_OutputFormatFunc(_type: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn IDL_OutputFormatLenFunc(_type: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_TypeSizeFunc(_type: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_TypeNameFunc(_type: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn IDL_nonavailable_rtn(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                                argk: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_FileTermName() -> *mut ::libc::c_char;
    pub fn IDL_FileTermIsTty() -> ::libc::c_int;
    pub fn IDL_FileTermLines() -> ::libc::c_int;
    pub fn IDL_FileTermColumns() -> ::libc::c_int;
    pub fn IDL_FileEnsureStatus(action: ::libc::c_int, unit: ::libc::c_int,
                                flags: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_FileSetMode(unit: ::libc::c_int, binary: ::libc::c_int) -> ();
    pub fn IDL_FileOpenUnitBasic(unit: ::libc::c_int,
                                 filename: *mut ::libc::c_char,
                                 access_mode: ::libc::c_int,
                                 flags: IDL_SFILE_FLAGS_T,
                                 msg_action: ::libc::c_int,
                                 errstate: IDL_MSG_ERRSTATE_PTR)
     -> ::libc::c_int;
    pub fn IDL_FileOpen(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                        argk: *mut ::libc::c_char, access_mode: ::libc::c_int,
                        extra_flags: IDL_SFILE_FLAGS_T,
                        longjmp_safe: ::libc::c_int, msg_attr: ::libc::c_int)
     -> ::libc::c_int;
    pub fn IDL_FileCloseUnit(unit: ::libc::c_int, flags: ::libc::c_int,
                             exit_status: *mut IDL_SFILE_PIPE_EXIT_STATUS,
                             msg_action: ::libc::c_int,
                             errstate: IDL_MSG_ERRSTATE_PTR) -> ::libc::c_int;
    pub fn IDL_FileClose(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                         argk: *mut ::libc::c_char) -> ();
    pub fn IDL_FileFlushUnit(unit: ::libc::c_int) -> ();
    pub fn IDL_FileGetUnit(argc: ::libc::c_int, argv: *mut IDL_VPTR) -> ();
    pub fn IDL_FileFreeUnit(argc: ::libc::c_int, argv: *mut IDL_VPTR) -> ();
    pub fn IDL_FileSetPtr(unit: ::libc::c_int, pos: IDL_LONG64,
                          extend: ::libc::c_int, msg_action: ::libc::c_int)
     -> ::libc::c_int;
    pub fn IDL_FileEOF(unit: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_FileStat(unit: ::libc::c_int, stat_blk: *mut IDL_FILE_STAT)
     -> ();
    pub fn IDL_FileSetClose(unit: ::libc::c_int, allow: ::libc::c_int) -> ();
    pub fn IDL_FileVaxFloat(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                            argk: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_SysRtnAdd(defs: *mut IDL_SYSFUN_DEF2,
                         is_function: ::libc::c_int, cnt: ::libc::c_int)
     -> ::libc::c_int;
    pub fn IDL_SysRtnNumEnabled(is_function: ::libc::c_int,
                                enabled: ::libc::c_int) -> IDL_LONG64;
    pub fn IDL_SysRtnGetEnabledNames(is_function: ::libc::c_int,
                                     str: *mut IDL_STRING,
                                     enabled: ::libc::c_int) -> ();
    pub fn IDL_SysRtnEnable(is_function: ::libc::c_int,
                            names: *mut IDL_STRING, n: IDL_LONG64,
                            option: ::libc::c_int, disfcn: IDL_SYSRTN_GENERIC)
     -> ();
    pub fn IDL_SysRtnGetRealPtr(is_function: ::libc::c_int,
                                name: *mut ::libc::c_char)
     -> IDL_SYSRTN_GENERIC;
    pub fn IDL_SysRtnGetCurrentName() -> *mut ::libc::c_char;
    pub fn IDL_LMGRLicenseInfo(iFlags: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_LMGRSetLicenseInfo(iFlags: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_LMGRLicenseCheckoutUnique(szFeature: *mut ::libc::c_char,
                                         szVersion: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn IDL_LMGRLicenseCheckout(szFeature: *mut ::libc::c_char,
                                   szVersion: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn IDL_AddSystemRoutine(defs: *mut IDL_SYSFUN_DEF,
                                is_function: ::libc::c_int,
                                cnt: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_StrUpCase(dest: *mut ::libc::c_char, src: *mut ::libc::c_char)
     -> ();
    pub fn IDL_StrDownCase(dest: *mut ::libc::c_char,
                           src: *mut ::libc::c_char) -> ();
    pub fn IDL_StrDup(str: *mut IDL_STRING, n: IDL_LONG64) -> ();
    pub fn IDL_StrDelete(str: *mut IDL_STRING, n: IDL_LONG64) -> ();
    pub fn IDL_StrStore(s: *mut IDL_STRING, fs: *const ::libc::c_char) -> ();
    pub fn IDL_StrEnsureLength(s: *mut IDL_STRING, n: ::libc::c_int) -> ();
    pub fn IDL_StrToSTRING(s: *const ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_stregex(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                       argk: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_VarGetData(v: IDL_VPTR, n: *mut IDL_LONG64,
                          pd: *mut *mut ::libc::c_char,
                          ensure_simple: ::libc::c_int) -> ();
    pub fn IDL_VarGet1EltStringDesc(v: IDL_VPTR, tc_v: *mut IDL_VPTR,
                                    like_print: ::libc::c_int)
     -> *mut IDL_STRING;
    pub fn IDL_VarGetString(v: IDL_VPTR) -> *mut ::libc::c_char;
    pub fn IDL_ImportArray(n_dim: ::libc::c_int, dim: *mut IDL_LONG64,
                           _type: ::libc::c_int, data: *mut UCHAR,
                           free_cb: IDL_ARRAY_FREE_CB, s: IDL_StructDefPtr)
     -> IDL_VPTR;
    pub fn IDL_ImportNamedArray(name: *mut ::libc::c_char,
                                n_dim: ::libc::c_int, dim: *mut IDL_LONG64,
                                _type: ::libc::c_int, data: *mut UCHAR,
                                free_cb: IDL_ARRAY_FREE_CB,
                                s: IDL_StructDefPtr) -> IDL_VPTR;
    pub fn IDL_Delvar(var: IDL_VPTR) -> ();
    pub fn IDL_VarTypeConvert(v: IDL_VPTR, _type: ::libc::c_int) -> IDL_VPTR;
    pub fn IDL_VarEnsureSimple(v: IDL_VPTR) -> ();
    pub fn IDL_VarMakeTempFromTemplate(template_var: IDL_VPTR,
                                       _type: ::libc::c_int,
                                       sdef: IDL_StructDefPtr,
                                       result_addr: *mut IDL_VPTR,
                                       zero: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn IDL_DitherMethodNamesFunc(method: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn IDL_RasterDrawThick(p0: *mut IDL_GR_PT, p1: *mut IDL_GR_PT,
                               a: *mut IDL_ATTR_STRUCT,
                               routine: IDL_DEVCORE_FCN_POLYFILL,
                               dot_width: ::libc::c_int) -> ();
    pub fn IDL_RasterPolyfill(x: *mut ::libc::c_int, y: *mut ::libc::c_int,
                              n: ::libc::c_int, p: *mut IDL_POLYFILL_ATTR,
                              r: *mut IDL_RASTER_DEF) -> ();
    pub fn IDL_RasterDraw(p0: *mut IDL_GR_PT, p1: *mut IDL_GR_PT,
                          a: *mut IDL_ATTR_STRUCT, r: *mut IDL_RASTER_DEF)
     -> ();
    pub fn IDL_Raster8Image(data: *mut UCHAR, nx: IDL_ULONG, ny: IDL_ULONG,
                            x0: IDL_ULONG, y0: IDL_ULONG, xsize: IDL_ULONG,
                            ysize: IDL_ULONG, secondary: *mut IDL_TV_STRUCT,
                            rs: *mut IDL_RASTER_DEF, bReverse: IDLBool_t)
     -> ();
    pub fn IDL_RasterImage(data: *mut UCHAR, nx: IDL_ULONG, ny: IDL_ULONG,
                           x0: IDL_ULONG, y0: IDL_ULONG, xsize: IDL_ULONG,
                           ysize: IDL_ULONG, secondary: *mut IDL_TV_STRUCT,
                           rs: *mut IDL_RASTER_DEF, bReverse: IDLBool_t)
     -> ();
    pub fn IDL_Dither(data: *mut UCHAR, ncols: ::libc::c_int,
                      nrows: ::libc::c_int, r: *mut IDL_RASTER_DEF,
                      x0: ::libc::c_int, y0: ::libc::c_int,
                      secondary: *mut IDL_TV_STRUCT) -> ();
    pub fn IDL_BitmapLandscape(_in: *mut IDL_RASTER_DEF,
                               out: *mut IDL_RASTER_DEF, y0: ::libc::c_int)
     -> ();
    pub fn IDL_transpose(argc: ::libc::c_int, argv: *mut IDL_VPTR)
     -> IDL_VPTR;
    pub fn IDL_KWProcessByOffset(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                                 argk: *mut ::libc::c_char,
                                 kw_list: *mut IDL_KW_PAR,
                                 plain_args: *mut IDL_VPTR,
                                 mask: ::libc::c_int,
                                 base: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn IDL_KWProcessByAddr(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                               argk: *mut ::libc::c_char,
                               kw_list: *mut IDL_KW_PAR,
                               plain_args: *mut IDL_VPTR, mask: ::libc::c_int,
                               free_required: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn IDL_KWFree() -> ();
    pub fn IDL_KWFreeAll() -> ();
    pub fn IDL_CvtBytscl(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                         argk: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_Freetmp(p: IDL_VPTR) -> ();
    pub fn IDL_Deltmp(p: IDL_VPTR) -> ();
    pub fn IDL_Gettmp() -> IDL_VPTR;
    pub fn IDL_GettmpByte(value: UCHAR) -> IDL_VPTR;
    pub fn IDL_GettmpInt(value: IDL_INT) -> IDL_VPTR;
    pub fn IDL_GettmpLong(value: IDL_LONG) -> IDL_VPTR;
    pub fn IDL_GettmpFloat(value: ::libc::c_float) -> IDL_VPTR;
    pub fn IDL_GettmpDouble(value: ::libc::c_double) -> IDL_VPTR;
    pub fn IDL_GettmpPtr(value: IDL_HVID) -> IDL_VPTR;
    pub fn IDL_GettmpObjRef(value: IDL_HVID) -> IDL_VPTR;
    pub fn IDL_GettmpUInt(value: IDL_UINT) -> IDL_VPTR;
    pub fn IDL_GettmpULong(value: IDL_ULONG) -> IDL_VPTR;
    pub fn IDL_GettmpLong64(value: IDL_LONG64) -> IDL_VPTR;
    pub fn IDL_GettmpULong64(value: IDL_ULONG64) -> IDL_VPTR;
    pub fn IDL_GettmpFILEINT(value: IDL_LONG64) -> IDL_VPTR;
    pub fn IDL_GettmpMEMINT(value: IDL_LONG64) -> IDL_VPTR;
    pub fn IDL_GetScratch(p: *mut IDL_VPTR, n_elts: IDL_LONG64,
                          elt_size: IDL_LONG64) -> *mut ::libc::c_char;
    pub fn IDL_GetScratchOnThreshold(auto_buf: *mut ::libc::c_char,
                                     auto_elts: IDL_LONG64,
                                     n_elts: IDL_LONG64, elt_size: IDL_LONG64,
                                     tempvar: *mut IDL_VPTR)
     -> *mut ::libc::c_char;
    pub fn IDL_VarCopy(src: IDL_VPTR, dst: IDL_VPTR) -> ();
    pub fn IDL_StoreScalar(dest: IDL_VPTR, _type: ::libc::c_int,
                           value: *mut IDL_ALLTYPES) -> ();
    pub fn IDL_StoreScalarZero(dest: IDL_VPTR, _type: ::libc::c_int) -> ();
    pub fn IDL_unform_io(_type: ::libc::c_int, argc: ::libc::c_int,
                         argv: *mut IDL_VPTR, argk: *mut ::libc::c_char)
     -> ();
    pub fn IDL_Print(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                     argk: *mut ::libc::c_char) -> ();
    pub fn IDL_PrintF(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                      argk: *mut ::libc::c_char) -> ();
    pub fn IDL_String_Remove(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                             argk: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_Variable_Diff(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                             argk: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_BasicTypeConversion(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                                   _type: ::libc::c_int) -> IDL_VPTR;
    pub fn IDL_CvtByte(argc: ::libc::c_int, argv: *mut IDL_VPTR) -> IDL_VPTR;
    pub fn IDL_CvtFix(argc: ::libc::c_int, argv: *mut IDL_VPTR) -> IDL_VPTR;
    pub fn IDL_CvtLng(argc: ::libc::c_int, argv: *mut IDL_VPTR) -> IDL_VPTR;
    pub fn IDL_CvtFlt(argc: ::libc::c_int, argv: *mut IDL_VPTR) -> IDL_VPTR;
    pub fn IDL_CvtDbl(argc: ::libc::c_int, argv: *mut IDL_VPTR) -> IDL_VPTR;
    pub fn IDL_CvtUInt(argc: ::libc::c_int, argv: *mut IDL_VPTR) -> IDL_VPTR;
    pub fn IDL_CvtULng(argc: ::libc::c_int, argv: *mut IDL_VPTR) -> IDL_VPTR;
    pub fn IDL_CvtLng64(argc: ::libc::c_int, argv: *mut IDL_VPTR) -> IDL_VPTR;
    pub fn IDL_CvtULng64(argc: ::libc::c_int, argv: *mut IDL_VPTR)
     -> IDL_VPTR;
    pub fn IDL_CvtMEMINT(argc: ::libc::c_int, argv: *mut IDL_VPTR)
     -> IDL_VPTR;
    pub fn IDL_CvtFILEINT(argc: ::libc::c_int, argv: *mut IDL_VPTR)
     -> IDL_VPTR;
    pub fn IDL_CvtComplex(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                          argk: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_CvtDComplex(argc: ::libc::c_int, argv: *mut IDL_VPTR)
     -> IDL_VPTR;
    pub fn IDL_CvtString(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                         argk: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_grMesh_Clip(fPlane: *mut ::libc::c_float,
                           clipSide: ::libc::c_short,
                           pfVin: *mut ::libc::c_float, iNVerts: IDL_LONG,
                           piCin: *mut IDL_LONG, iNConn: IDL_LONG,
                           pfVout: *mut *mut ::libc::c_float,
                           iNVout: *mut IDL_LONG, piCout: *mut *mut IDL_LONG,
                           iNCout: *mut IDL_LONG, vpAuxInKW: IDL_VPTR,
                           vpAuxOutKW: IDL_VPTR, vpCut: IDL_VPTR) -> IDL_LONG;
    pub fn IDL_LongScalar(v: IDL_VPTR) -> IDL_LONG;
    pub fn IDL_ULongScalar(v: IDL_VPTR) -> IDL_ULONG;
    pub fn IDL_Long64Scalar(v: IDL_VPTR) -> IDL_LONG64;
    pub fn IDL_ULong64Scalar(v: IDL_VPTR) -> IDL_ULONG64;
    pub fn IDL_DoubleScalar(v: IDL_VPTR) -> ::libc::c_double;
    pub fn IDL_MEMINTScalar(v: IDL_VPTR) -> IDL_LONG64;
    pub fn IDL_FILEINTScalar(v: IDL_VPTR) -> IDL_LONG64;
    pub fn IDL_CastUL64_f(value: IDL_ULONG64) -> ::libc::c_float;
    pub fn IDL_CastUL64_d(value: IDL_ULONG64) -> ::libc::c_double;
    pub fn IDL_CastFloat_UL(value: ::libc::c_float) -> IDL_ULONG;
    pub fn IDL_CastDouble_UL(value: ::libc::c_double) -> IDL_ULONG;
    pub fn IDL_StrBase_strcasecmp(str1: *const ::libc::c_char,
                                  str2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn IDL_StrBase_strncasecmp(str1: *const ::libc::c_char,
                                   str2: *const ::libc::c_char,
                                   nchars: size_t) -> ::libc::c_int;
    pub fn IDL_StrBase_strlcpy(dst: *mut ::libc::c_char,
                               src: *const ::libc::c_char, siz: size_t)
     -> size_t;
    pub fn IDL_StrBase_strlcat(dst: *mut ::libc::c_char,
                               src: *const ::libc::c_char, siz: size_t)
     -> size_t;
    pub fn IDL_StrBase_strlcatW(dst: *mut wchar_t, src: *const wchar_t,
                                siz: size_t) -> size_t;
    pub fn IDL_StrBase_vsnprintf(s: *mut ::libc::c_char, n: size_t,
                                 format: *const ::libc::c_char, args: va_list)
     -> ::libc::c_int;
    pub fn IDL_StrBase_snprintf(s: *mut ::libc::c_char, n: size_t,
                                format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn IDL_StrBase_strbcopy(dst: *mut ::libc::c_char,
                                src: *const ::libc::c_char, siz: size_t)
     -> ::libc::c_int;
    pub fn IDL_StrBase_strbcopyW(dst: *mut wchar_t, src: *const wchar_t,
                                 siz: size_t) -> ::libc::c_int;
    pub fn IDL_RgbToHsv(r: *mut UCHAR, g: *mut UCHAR, b: *mut UCHAR,
                        h: *mut ::libc::c_float, s: *mut ::libc::c_float,
                        v: *mut ::libc::c_float, n: ::libc::c_int) -> ();
    pub fn IDL_RgbToHls(r: *mut UCHAR, g: *mut UCHAR, b: *mut UCHAR,
                        h: *mut ::libc::c_float, l: *mut ::libc::c_float,
                        s: *mut ::libc::c_float, n: ::libc::c_int) -> ();
    pub fn IDL_HsvToRgb(h: *mut ::libc::c_float, s: *mut ::libc::c_float,
                        v: *mut ::libc::c_float, r: *mut UCHAR, g: *mut UCHAR,
                        b: *mut UCHAR, n: ::libc::c_int) -> ();
    pub fn IDL_HlsToRgb(h: *mut ::libc::c_float, l: *mut ::libc::c_float,
                        s: *mut ::libc::c_float, r: *mut UCHAR, g: *mut UCHAR,
                        b: *mut UCHAR, n: ::libc::c_int) -> ();
    pub fn IDL_AddDevice(dev: *mut IDL_DEVICE_DEF, msg_action: ::libc::c_int)
     -> ::libc::c_int;
    pub fn IDL_MakeTempStruct(sdef: IDL_StructDefPtr, n_dim: ::libc::c_int,
                              dim: *mut IDL_LONG64, var: *mut IDL_VPTR,
                              zero: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn IDL_MakeTempStructVector(sdef: IDL_StructDefPtr, dim: IDL_LONG64,
                                    var: *mut IDL_VPTR, zero: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn IDL_MakeStruct(name: *mut ::libc::c_char,
                          tags: *mut IDL_STRUCT_TAG_DEF) -> IDL_StructDefPtr;
    pub fn IDL_StructTagInfoByName(sdef: IDL_StructDefPtr,
                                   name: *mut ::libc::c_char,
                                   msg_action: ::libc::c_int,
                                   var: *mut IDL_VPTR) -> IDL_LONG64;
    pub fn IDL_StructTagInfoByIndex(sdef: IDL_StructDefPtr,
                                    index: ::libc::c_int,
                                    msg_action: ::libc::c_int,
                                    var: *mut IDL_VPTR) -> IDL_LONG64;
    pub fn IDL_StructTagNameByIndex(sdef: IDL_StructDefPtr,
                                    index: ::libc::c_int,
                                    msg_action: ::libc::c_int,
                                    struct_name: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn IDL_StructNumTags(sdef: IDL_StructDefPtr) -> ::libc::c_int;
    pub fn IDL_InitOCX(pInit: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn IDL_FilePathFromRoot(flags: ::libc::c_int,
                                pathbuf: *mut ::libc::c_char,
                                root: *mut ::libc::c_char,
                                file: *mut ::libc::c_char,
                                ext: *mut ::libc::c_char,
                                nsubdir: ::libc::c_int,
                                subdir: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn IDL_FilePathFromRootW(flags: ::libc::c_int, pathbuf: *mut wchar_t,
                                 root: *mut wchar_t, file: *mut wchar_t,
                                 ext: *mut wchar_t, nsubdir: ::libc::c_int,
                                 subdir: *mut *mut wchar_t) -> *mut wchar_t;
    pub fn IDL_FilePathFromDist(flags: ::libc::c_int,
                                pathbuf: *mut ::libc::c_char,
                                file: *mut ::libc::c_char,
                                ext: *mut ::libc::c_char,
                                nsubdir: ::libc::c_int,
                                subdir: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn IDL_FilePathFromDistW(flags: ::libc::c_int, pathbuf: *mut wchar_t,
                                 file: *mut wchar_t, ext: *mut wchar_t,
                                 nsubdir: ::libc::c_int,
                                 subdir: *mut *mut wchar_t) -> *mut wchar_t;
    pub fn IDL_FilePathFromDistBin(flags: ::libc::c_int,
                                   pathbuf: *mut ::libc::c_char,
                                   file: *mut ::libc::c_char,
                                   ext: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn IDL_FilePathFromDistBinW(flags: ::libc::c_int,
                                    pathbuf: *mut wchar_t, file: *mut wchar_t,
                                    ext: *mut wchar_t) -> *mut wchar_t;
    pub fn IDL_FilePathFromDistHelp(flags: ::libc::c_int,
                                    pathbuf: *mut ::libc::c_char,
                                    file: *mut ::libc::c_char,
                                    ext: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn IDL_FilePathFromDistHelpW(flags: ::libc::c_int,
                                     pathbuf: *mut wchar_t,
                                     file: *mut wchar_t, ext: *mut wchar_t)
     -> *mut wchar_t;
    pub fn IDL_FilePathGetTmpDir(path: *mut ::libc::c_char) -> ();
    pub fn IDL_FilePathGetTmpDirW(path: *mut wchar_t) -> ();
    pub fn IDL_FilePathExpand(path: *mut ::libc::c_char,
                              msg_action: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_FilePathExpandW(wcharPath: *mut wchar_t,
                               msg_action: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_FilePathSearch(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                              argk: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_FilePathSearch(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                              argk: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_TerminalRaw(to_from: ::libc::c_int, fnin: ::libc::c_int) -> ();
    pub fn IDL_Pout(control: *mut IDL_POUT_CNTRL, flags: ::libc::c_int,
                    fmt: *mut ::libc::c_char, ...) -> ();
    pub fn IDL_PoutVa(control: *mut IDL_POUT_CNTRL, flags: ::libc::c_int,
                      fmt: *mut ::libc::c_char, args: *mut va_list) -> ();
    pub fn IDL_PoutRaw(unit: ::libc::c_int, buf: *mut ::libc::c_char,
                       n: ::libc::c_int) -> ();
    pub fn IDL_EzCall(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                      arg_struct: *mut IDL_EZ_ARG) -> ();
    pub fn IDL_EzCallCleanup(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                             arg_struct: *mut IDL_EZ_ARG) -> ();
    pub fn IDL_EzReplaceWithTranspose(v: *mut IDL_VPTR, orig: IDL_VPTR) -> ();
    pub fn IDL_MakeTempArray(_type: ::libc::c_int, n_dim: ::libc::c_int,
                             dim: *mut IDL_LONG64, init: ::libc::c_int,
                             var: *mut IDL_VPTR) -> *mut ::libc::c_char;
    pub fn IDL_MakeTempVector(_type: ::libc::c_int, dim: IDL_LONG64,
                              init: ::libc::c_int, var: *mut IDL_VPTR)
     -> *mut ::libc::c_char;
    pub fn IDL_TimerSet(length: IDL_LONG, callback: IDL_TIMER_CB,
                        from_callback: ::libc::c_int,
                        context: IDL_TIMER_CONTEXT_PTR) -> ();
    pub fn IDL_TimerCancel(context: IDL_TIMER_CONTEXT) -> ();
    pub fn IDL_TimerBlock(stop: ::libc::c_int) -> ();
    pub fn IDL_ToutPush(outf: IDL_TOUT_OUTF) -> ();
    pub fn IDL_ToutPop() -> IDL_TOUT_OUTF;
    pub fn IDL_CvtVAXToFloat(fp: *mut ::libc::c_float, n: IDL_LONG64) -> ();
    pub fn IDL_CvtFloatToVAX(fp: *mut ::libc::c_float, n: IDL_LONG64) -> ();
    pub fn IDL_CvtVAXToDouble(dp: *mut ::libc::c_double, n: IDL_LONG64) -> ();
    pub fn IDL_CvtDoubleToVAX(dp: *mut ::libc::c_double, n: IDL_LONG64) -> ();
    pub fn IDL_ExitRegister(_proc: IDL_EXIT_HANDLER_FUNC) -> ();
    pub fn IDL_ExitUnregister(_proc: IDL_EXIT_HANDLER_FUNC) -> ();
    pub fn IDL_WidgetIssueStubEvent(rec: *mut ::libc::c_char, value: IDL_LONG)
     -> ();
    pub fn IDL_WidgetSetStubIds(rec: *mut ::libc::c_char,
                                t_id: ::libc::c_ulong, b_id: ::libc::c_ulong)
     -> ();
    pub fn IDL_WidgetGetStubIds(rec: *mut ::libc::c_char,
                                t_id: *mut ::libc::c_ulong,
                                b_id: *mut ::libc::c_ulong) -> ();
    pub fn IDL_WidgetStubLock(set: ::libc::c_int) -> ();
    pub fn IDL_WidgetStubGetParent(id: IDL_ULONG,
                                   szDisplay: *mut ::libc::c_char)
     -> *mut ::libc::c_void;
    pub fn IDL_WidgetStubLookup(id: IDL_ULONG) -> *mut ::libc::c_char;
    pub fn IDL_WidgetStubSetSizeFunc(rec: *mut ::libc::c_char,
                                     func: IDL_WIDGET_STUB_SET_SIZE_FUNC)
     -> ();
    pub fn IDL_Wait(argc: ::libc::c_int, argv: *mut IDL_VPTR) -> ();
    pub fn IDL_GetUserInfo(user_info: *mut IDL_USER_INFO) -> ();
    pub fn IDL_GetKbrd(should_wait: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_TTYReset() -> ();
    pub fn IDL_PlotComAddr() -> *mut IDL_PLOT_COM;
    pub fn IDL_ColorMapAddr() -> *mut UCHAR;
    pub fn IDL_PolyfillSoftware(x: *mut ::libc::c_int, y: *mut ::libc::c_int,
                                n: ::libc::c_int, s: *mut IDL_POLYFILL_ATTR)
     -> ();
    pub fn IDL_GraphText(p: *mut IDL_GR_PT, ga: *mut IDL_ATTR_STRUCT,
                         a: *mut IDL_TEXT_STRUCT, text: *mut ::libc::c_char)
     -> ::libc::c_double;
    pub fn IDL_VarName(v: IDL_VPTR) -> *mut ::libc::c_char;
    pub fn IDL_GetVarAddr1(name: *mut ::libc::c_char, ienter: ::libc::c_int)
     -> IDL_VPTR;
    pub fn IDL_GetVarAddr(name: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_FindNamedVariable(name: *mut ::libc::c_char,
                                 ienter: ::libc::c_int) -> IDL_VPTR;
    pub fn IDL_scope_varfetch(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                              argk: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_HeapVarHashFind(hash_id: IDL_HVID) -> IDL_HEAP_VPTR;
    pub fn IDL_HeapVarNew(hvid_type: ::libc::c_int, value: IDL_VPTR,
                          flags: ::libc::c_int, msg_action: ::libc::c_int)
     -> IDL_HEAP_VPTR;
    pub fn IDL_HeapIncrRefCount(hvid: *mut IDL_HVID, n: IDL_LONG64) -> ();
    pub fn IDL_HeapDecrRefCount(hvid: *mut IDL_HVID, n: IDL_LONG64) -> ();
    pub fn IDL_ObjCallMethodByString(methName: *mut ::libc::c_char,
                                     obj: IDL_HVID, result: *mut IDL_VPTR,
                                     argc: ::libc::c_int, argv: *mut IDL_VPTR,
                                     argk: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn IDL_ObjNew(argc: ::libc::c_int, argv: *mut IDL_VPTR,
                      argk: *mut ::libc::c_char) -> IDL_VPTR;
    pub fn IDL_ObjIsA(argc: ::libc::c_int, argv: *mut IDL_VPTR) -> IDL_VPTR;
    pub fn IDL_Rline(s: *mut ::libc::c_char, n: IDL_LONG64,
                     unit: ::libc::c_int, stream: *mut FILE,
                     is_tty: ::libc::c_int, prompt: *mut ::libc::c_char,
                     opt: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn IDL_RlineSetStdinOptions(opt: ::libc::c_int) -> ();
    pub fn IDL_Logit(s: *mut ::libc::c_char) -> ();
    pub fn IDL_SysvVersionArch() -> *mut IDL_STRING;
    pub fn IDL_SysvVersionOS() -> *mut IDL_STRING;
    pub fn IDL_SysvVersionOSFamily() -> *mut IDL_STRING;
    pub fn IDL_SysvVersionRelease() -> *mut IDL_STRING;
    pub fn IDL_ProgramNameFunc() -> *mut ::libc::c_char;
    pub fn IDL_ProgramNameLCFunc() -> *mut ::libc::c_char;
    pub fn IDL_SysvDirFunc() -> *mut IDL_STRING;
    pub fn IDL_SysvErrCodeValue() -> IDL_LONG;
    pub fn IDL_SysvErrorStateAddr() -> *mut IDL_SYS_ERROR_STATE;
    pub fn IDL_SysvErrStringFunc() -> *mut IDL_STRING;
    pub fn IDL_SysvSyserrStringFunc() -> *mut IDL_STRING;
    pub fn IDL_SysvErrorCodeValue() -> IDL_LONG;
    pub fn IDL_SysvSyserrorCodesAddr() -> *mut IDL_LONG;
    pub fn IDL_SysvOrderValue() -> IDL_LONG;
    pub fn IDL_SysvValuesGetFloat(_type: ::libc::c_int) -> ::libc::c_float;
    pub fn IDL_SysvValuesGetDouble(_type: ::libc::c_int) -> ::libc::c_double;
    pub fn IDL_MessageNameToCode(block: IDL_MSG_BLOCK,
                                 name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn IDL_MessageDefineBlock(block_name: *mut ::libc::c_char,
                                  n: ::libc::c_int, defs: *mut IDL_MSG_DEF)
     -> IDL_MSG_BLOCK;
    pub fn IDL_MessageErrno(code: ::libc::c_int, ...) -> ();
    pub fn IDL_MessageErrnoFromBlock(block: IDL_MSG_BLOCK,
                                     code: ::libc::c_int, ...) -> ();
    pub fn IDL_Message(code: ::libc::c_int, action: ::libc::c_int, ...) -> ();
    pub fn IDL_MessageFromBlock(block: IDL_MSG_BLOCK, code: ::libc::c_int,
                                action: ::libc::c_int, ...) -> ();
    pub fn IDL_MessageSyscode(code: ::libc::c_int,
                              syscode_type: IDL_MSG_SYSCODE_T,
                              syscode: ::libc::c_int,
                              action: ::libc::c_int, ...) -> ();
    pub fn IDL_MessageSyscodeFromBlock(block: IDL_MSG_BLOCK,
                                       code: ::libc::c_int,
                                       syscode_type: IDL_MSG_SYSCODE_T,
                                       syscode: ::libc::c_int,
                                       action: ::libc::c_int, ...) -> ();
    pub fn IDL_MessageVarError(code: ::libc::c_int, var: IDL_VPTR,
                               action: ::libc::c_int) -> ();
    pub fn IDL_MessageVarErrorFromBlock(block: IDL_MSG_BLOCK,
                                        code: ::libc::c_int, var: IDL_VPTR,
                                        action: ::libc::c_int) -> ();
    pub fn IDL_MessageResetSysvErrorState() -> ();
    pub fn IDL_MessageSJE(value: *mut ::libc::c_void) -> ();
    pub fn IDL_MessageGJE() -> *mut ::libc::c_void;
    pub fn IDL_MessageVE_UNDEFVAR(var: IDL_VPTR, action: ::libc::c_int) -> ();
    pub fn IDL_MessageVE_NOTARRAY(var: IDL_VPTR, action: ::libc::c_int) -> ();
    pub fn IDL_MessageVE_NOTSCALAR(var: IDL_VPTR, action: ::libc::c_int)
     -> ();
    pub fn IDL_MessageVE_NOEXPR(var: IDL_VPTR, action: ::libc::c_int) -> ();
    pub fn IDL_MessageVE_NOCONST(var: IDL_VPTR, action: ::libc::c_int) -> ();
    pub fn IDL_MessageVE_NOFILE(var: IDL_VPTR, action: ::libc::c_int) -> ();
    pub fn IDL_MessageVE_NOCOMPLEX(var: IDL_VPTR, action: ::libc::c_int)
     -> ();
    pub fn IDL_MessageVE_NOSTRING(var: IDL_VPTR, action: ::libc::c_int) -> ();
    pub fn IDL_MessageVE_NOSTRUCT(var: IDL_VPTR, action: ::libc::c_int) -> ();
    pub fn IDL_MessageVE_REQSTR(var: IDL_VPTR, action: ::libc::c_int) -> ();
    pub fn IDL_MessageVE_NOSCALAR(var: IDL_VPTR, action: ::libc::c_int) -> ();
    pub fn IDL_MessageVE_NOMEMINT64(var: IDL_VPTR, action: ::libc::c_int)
     -> ();
    pub fn IDL_MessageVE_STRUC_REQ(var: IDL_VPTR, action: ::libc::c_int)
     -> ();
    pub fn IDL_MessageVE_REQPTR(var: IDL_VPTR, action: ::libc::c_int) -> ();
    pub fn IDL_MessageVE_REQOBJREF(var: IDL_VPTR, action: ::libc::c_int)
     -> ();
    pub fn IDL_Message_BADARRDNUM(action: ::libc::c_int) -> ();
    pub fn IDL_SignalSetInit(set: *mut IDL_SignalSet_t, signo: ::libc::c_int)
     -> ();
    pub fn IDL_SignalSetAdd(set: *mut IDL_SignalSet_t, signo: ::libc::c_int)
     -> ();
    pub fn IDL_SignalSetDel(set: *mut IDL_SignalSet_t, signo: ::libc::c_int)
     -> ();
    pub fn IDL_SignalSetIsMember(set: *mut IDL_SignalSet_t,
                                 signo: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_SignalMaskGet(set: *mut IDL_SignalSet_t) -> ();
    pub fn IDL_SignalMaskSet(set: *mut IDL_SignalSet_t,
                             oset: *mut IDL_SignalSet_t) -> ();
    pub fn IDL_SignalMaskBlock(set: *mut IDL_SignalSet_t,
                               oset: *mut IDL_SignalSet_t) -> ();
    pub fn IDL_SignalBlock(signo: ::libc::c_int, oset: *mut IDL_SignalSet_t)
     -> ();
    pub fn IDL_SignalSuspend(set: *mut IDL_SignalSet_t) -> ();
    pub fn IDL_SignalRegister(signo: ::libc::c_int, func: IDL_SignalHandler_t,
                              msg_action: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_SignalUnregister(signo: ::libc::c_int,
                                func: IDL_SignalHandler_t,
                                msg_action: ::libc::c_int) -> ::libc::c_int;
    pub fn IDL_SetValue(id: ::libc::c_int, pvValue: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn IDL_WinPostInit() -> ();
    pub fn IDL_WinCleanup() -> ();
    pub fn IDL_MemAlloc(n: IDL_LONG64, err_str: *const ::libc::c_char,
                        msg_action: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn IDL_MemRealloc(ptr: *mut ::libc::c_void, n: IDL_LONG64,
                          err_str: *const ::libc::c_char,
                          action: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn IDL_MemFree(m: *mut ::libc::c_void, err_str: *const ::libc::c_char,
                       msg_action: ::libc::c_int) -> ();
    pub fn IDL_MemAllocPerm(n: IDL_LONG64, err_str: *const ::libc::c_char,
                            action: ::libc::c_int) -> *mut ::libc::c_void;
}
